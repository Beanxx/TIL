[TIL] Day10
[SEB FE] Day10

## 1️⃣ CLI(Command-Line Interface)

- **터미널**: CLI(Command-Line Interface)
- **프롬프트(Prompt)**: CLI의 명령줄 대기모드로써, 키보드의 입력을 확인하고 편집할 수 있는 한 줄의 공간

### 📎 CLI 명령어

- `pwd`(print working directory): 현재 위치 확인
- `mkdir`(make directories): 새로운 폴더 생성 (생성할 폴더의 이름을 함께 입력)
`mkdir helloWorld`
✋ 폴더 또는 파일의 이름에 공백(띄어쓰기)이나 특수문자가 있으면, 백슬래시(`\`)를 이용해 적용
- `ls`(list): 특정 폴더에 포함된 파일이나 폴더 확인
    - `ls -l`: 폴더나 파일의 포맷을 전부 표현
        - `drwxr-x-x` : 첫번째 글자가 `d`인 경우 ‘폴더’ (`cd` 명령어를 통해 진입 가능)
        - `-rw-r—r—` : 첫번째 글자가 `-`인 경우 ‘파일’ (진입 불가능)
    - `ls -a`: all / 숨어있는 폴더나 파일을 포함한 모든 항목 출력
    - `ls -al` / `ls -al`
    ✋ 옵션을 뜻하는 대쉬(dash, `-`) 뒤에 오는 옵션의 순서는 기능에 영향을 미치지 않음
        

- `open .` : GUI 탐색기로 폴더 열기
- `cd`(change directory): 프롬프트로 상호작용하는 폴더를 다른 폴더로 변경
    - `cd ~/helloWorld/hello` ← 현재 진행 중인 폴더로 한 번에 이동
- `touch`: 파일 생성
`touch hi.txt`
    
- `cat`: 파일 내용을 터미널에 출력

- `rm`(remove): 폴더나 파일 삭제 (단일 파일 삭제 가능) (휴지통을 거치지 않고, 즉시 삭제)
    - `rm -rf`: 폴더 삭제 가능
        - 옵션 `r`: recursive, 폴더를 지울 때 사용
        - 옵션 `f`: force, 질문을 받지 않고 지울 때 사용
- `mv`: 폴더나 파일 이름 변경 / 폴더나 파일 위치 옮기기
    - `mv [폴더/파일 이름] [도착 폴더 이름]`
    - `mv [폴더/파일 이름] [변경하고자 하는 파일 이름]`
- `cp`(copy): 폴더/파일 복사
    - `cp [원본 파일 이름] [복사할 파일 이름]`
    - `cp -rf`: 폴더 복사
    	- `cp -rf myFolder ../` : 상위 폴더로 복사
        ✋ `.` : 현재 폴더 / `..` : 현재 폴더(`.`)보다 앞에 있는 폴더 
        
<br/>

### 📎 절대 경로 & 상대 경로

- 절대 경로: 기준점(루트 폴더, `/`)으로부터의 절대적인 위치로써, 특정 폴더나 파일이 루트 폴더로부터 어떤 폴더로 진입하는 경우 만날 수 있는지 나타냄
    
    `/Users/bean/helloWorld/hello`
    
- 상대 경로: 특정 폴더/파일의 위치를 현재 위치를 기준점으로 나타냄
	`cd ./hello` : `./`는 ‘현재 폴더 아래의'라는 뜻. 즉, 하위폴더로 이동
	✋ = `cd ~/helloWorld/hello` `cd hello`
    
<br/>

### 📎 관리자(root) 권한

- 절대 경로의 기준점인 루트 폴더(`/`)는 Linux의 관리자 영역 → 사용자 권한으로는 할 수 있는 일이 없음
- `whoami` : 현재 로그인된 사용자 확인

- 사용자 권한은 username 폴더 내에서만 자유롭게 사용 가능
- 관리자 권한을 이용하면, 다른 사용자 폴더에도 영향을 끼칠 수 있음. 시스템 자체에도 접근 가능
    - 관리자 권한으로 변경한 내용은, 사용자 권한으로 해결할 수 없음
    - 사용자가 프로그램을 설치/변경/삭제하는 권한을 차단하여 시스템을 안전하게 보호

- 사용자 폴더의 경로(Path): `~/` 로 표시 (~는 루트폴더(`/`)로부터 사용자 폴더(username)까지의 경로 축약 형태

<br/>

### 📎 sudo: 관리자 권한 획득 명령어

- 사용자가 새로운 프로그램 설치/변경/삭제 시, 관리자 권한 필요 → `sudo` 명령어 사용
- 기본적인 CLI 명령어의 앞에 작성하여, 관리자 권한을 일시적으로 획득하는 명령어 (with password:~~8907~~)
- `sudo`를 이용해 생성한 폴더의 소유자는 `root` ⇒ 사용자 권한이 아닌, 관리자 권한으로 생성
    - `ls -l` 명령어를 통해 폴더/파일 권한 확인 가능

 		✋ 경로 `/etc/`는 루트폴더 아래의 폴더로 사용자 권한을 벗어난 위치에서 새로운 파일을 생성하므로, 반드시 관리자 권한 필요

<br/>

### 📎 nano editor
: CLI 환경에서 사용하기 쉬운 에디터

1. 파일 열기
    
    ```bash
    nano hello.js. # hello.js를 nano editor에서 열기
    nano  # nano editor 그냥 실행
    ```
    
2. 파일 편집 후 종료
    
    `^X` = `control` + `X`
    
3. 파일 저장
    
    `^0 WrtieOut`
    
<br/>
<hr/>

## 2️⃣ 패키지 & 패키지 매니저

: 패키지의 설치, 변경, 삭제 등 관리를 편리하게 해주는 도구

### 📎 brew 명령어

- `brew update`: brew 자체 업데이트
- `brew outdatd`: 업데이트 필요한 파일 조회
- `brew upgrade [프로그램 이름]`: 프로그램 업그레이드(업데이트)
- `brew search [검색어]`: 프로그램 검색
- `brew info [프로그램 이름]`: 프로그램 정보 확인
- `brew install [프로그램 이름]`: 프로그램 설치
- `brew uninstall [프로그램 이름]`: 프로그램 삭제
- `brew list`: 설치된 프로그램 보기

### 📎 **wget 설치**

- `wget`: URL을 통해 파일을 다운로드하는 프로그램
    
    ```bash
    brew install wget  # wget 설치
    wget -O goodjob.txt <https://bit.ly/37sJqCo>  # goodjob.txt 파일 생성
    ```

<br/>
<hr/>

## 3️⃣ Node.js

: **JavaScript runtime**(프로그래밍 언어가 실행되는 환경으로 즉, 어떤 프로그램이 동작할 때, 프로그램이 동작하는 곳) 중 하나 
→ 웹 브라우저가 아닌 곳에서도 JS 실행 가능 ⇒ 서버 구축 등 활용폭 크게 확장

✋ JavaScript 런타임 종류: Chrome, Safari, FireFox 등의 웹 브라우저

```bash
# nvm으로 lts 버전의 Node.js 설치
nvm install --lts

# Node.js 버전 확인
node -v

# JS 파일을 Node.js로 실행
node <file_name>
```

✋ LTS(Long-Term Support): Node.js에서 지원하는 기간이 긴 것을 의미

<br/>

### 📎 nvm

- `nvm`(Node Version Manager): node.js의 다양한 버전 관리를 함
   ⇒ 다양한 Node.js version를 설치하고 관리할 수 있는 프로그램
    
    ```bash
    # Wget 명령어로 nvm 설치
    wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
    
    # nvm 버전 확인
    nvm --version
    
    # nvm을 통해 설치한 Node.js version ghkrdls
    nvm ls
    
    # 특정 버전의 Node.js 설치
    nvm install <version number(12.18.3)>
    
    # 사용 중인 Node.js version을 다른 버전으로 변경
    nvm use <version number>
    ```
    
<br/>

### 📎 npm

: Node Package Manager

✋ Linux의 Package Manager: `apt` / macOS의 Package Manager: `brew`

: `node.js`에서 남이 만들어넣은 모듈 → 이에 대한 정보를 담아둔 곳이 `package.json`

```bash
# npm script
npm run <script name>
npm run start
```

<br/>

### 📎 package.json

: npm 모듈을 활용하기 위해 해당 모듈에 대한 정보를 담은 파일 
  ⇒ 프로젝트 전반에 관한 정보가 들어있음

- 해당 프로그램을 실행시키기 위해 필요한 실제 모듈은 `node_modules` 폴더에 따로 저장됨
⇒ `package.json`에는 어떤 모듈인지만 적혀 있음
✋ 프로그램을 실행시키기 위해 필요한 실제 모듈은 `package.json`이 아닌 `node_modules` 폴더에 저장
    

👉🏻 `npm install` → `package.json`에서 필요하다고 하는 모듈 다운로드 → `node_modules` 디렉토리 생성

- `dependency`(의존성 모듈): 개발이나 실행에 해당 모듈을 ‘의존’ (프로그램 실행과 관계없는 오로지 개발을 위해 필요한 ‘의존성 모듈')
    - `dependencies`: 직접 실행과 관련 있는 dependency
    - `devDependencies`: 프로젝트를 개발하는 환경에서 필요한 모듈들이 무엇인지 적혀 있음
        
        ```bash
        # --save-dev 옵션과 함께 설치하면, 자동으로 devDependencies에 추가됨
        npm install mocah --save-dev
        ```
        
| node.js | npm | nvm |
| --- | --- | --- |
| 자바스크립트의 런타임 환경 | node.js 패키지 매니저 | node.js 버전 매니저 |

<br/>
<hr/>

## 4️⃣ Git

: 개발자의 코드를 효율적으로 관리하기 위한 분산형 버전 관리 시스템(Version Control System)

👉🏻 소스 코드가 변경된 이력을 쉽게 확인 가능 / 특정 시점에 저장된 버전과 비교하거나 특정 시점으로 되돌아갈 수 있음

### 📎 버전 관리 사용 이유

1. 파일 변경시 변경 이력 저장 가능
2. 이전 버전으로 되돌아갈 수 있음
3. 어떤 변경 사항이 발생했는지 알아보기 쉬움
4. 협업에 용이
5. 백업용

<br/>

✅ Git: 소스 코드 기록을 관리하고 추적할 수 있는 버전 관리 시스템
✅ Github: Git Repository(저장소)를 관리할 수 있는 클라우드 기반 서비스
- Git repository: Git으로 관리되는 폴더
	
    - Remote Repository: 원격 온라인 서버 상의 저장소 (여러 사람이 함께 공유 가능)
    - Local Repository: 내 컴퓨터의 저장소 (내 개인 전용 저장소)


✋ 오픈 소스(소스 코드가 공개된 SW)는 누구나 자유롭게 해당 기능을 추가/개선 가능 ⇒ 기여하다(contribute)


>** Git 명령어 **
- `commit`: 특정 시점에 생성된 백업 복사본(=스냅샷)을 만들어 주는 작업
- `fork`: 오픈 소스 코드가 업로드 되어 있는 원격 저장소에서 내 원격 저장소로 가지고 오는 작업
- `clone`: 원격 저장소(Remote)에 있는 코드를 내 컴퓨터(Local)로 가져오는 작업
- `push`: 내 컴퓨터(Local)에서 작업한 소스코드 변경 작업을 commit을 통해 저장해준 뒤, 원격 저장소(Remote)에 반영하는 작업 
(Local Repository에 기록해 놓은 commit을 Remote Repository로 업로드)
- `pull request`: 내가 제안한 코드 변경사항에 대해 반영 여부 요청
- `pull`: 원격 저장소에서 변경 사항이 생겼을 때, 변경된 사항을 로컬 저장소에 반영하는 작업

<br/>

### 📎 Git 환경설정

1. 사용자 정보 등록
    
    ```bash
    $ git config --global user.name "Beanxx"
    $ git config --global user.email "tnqls1211v@gmail.com"
    ```
    
    ✋ `—global` 옵션: 사용자 홈에 저장되므로 git 설정시 처음에 한 번만 입력해도 됨
    

2. 추가 인증 방법
    
    ```bash
    # 1. SSH 키 생성
    ssh-keygen 
    # ssh keypair: id_rsa(Private Key/Secret Key), id_rsa.pub(Public Key) 생성
    
    # 2. Public Key(공개키) 복사
    cat ~/.ssh/id_rsa.pub
    
    # 3. Github에 공개키 등록
    # Settings -> SSH and GPG keys -> New SSH key -> Add SSH key
    
    # 4. SSH key 사용
    git clone <code의 SSH 탭에 나타난 문자열 복사>
    
    ```
    
2. Github CLI를 사용하기 위한 인증 과정
    
    ```bash
    $ brew install gh  # Github CLI 설치
    $ gh auth login  # Login 시도
    ```

<br/>
<hr/>

✅ ** Pair Programming **

> 1. range module를 활용하여 `짝수 생성기` 생성
> 2. `assignment-manager`로 제출
> 3. `calculator sprint` 과제 재제출
